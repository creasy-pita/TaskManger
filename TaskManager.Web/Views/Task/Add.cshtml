@using TaskManager.Domain.Model;
@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<tb_category_model> Category = ViewBag.Category as List<tb_category_model>;
    List<tb_node_model> Node = ViewBag.Node as List<tb_node_model>;
    List<tb_user_model> User = ViewBag.User as List<tb_user_model>;
    List<tb_package_model> package = ViewBag.package as List<tb_package_model>;
}
<style>
     
</style>

<script>
    function GetVersionList(packageid) {
        //var url = "/PackageVersion/Index?packageid=" + packageid;
        var url = "/api/PackageVersion/view/" + packageid;
        //alert(url);
        $.ajax({
            url: url,
            type: "GET",
            processData: false,
            contentType: false,
            success: function (data) {
                if (data != undefined) {
                    var selectbox = $("#taskpackageversionid").get(0);
                    removeOptions(selectbox);
                    for (var i = 0; i < data.length; i++) {
                        var pv = data[i];
                        var option = document.createElement("option");
                        option.text = pv.versionno + '_' + pv.zipfilename;
                        option.value = pv.id;
                        selectbox.add(option);
                    }
                }
            }
        });
    }
    function removeOptions(selectbox) {
        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }
    function sub() {
        if ($("#nodename").val() == "") {
            alert("请填写节点名称！");
            return false;
        }
        if ($("#TaskDll").val() == "") {
            alert("请选择新版本文件！")
            return false;
        }
        var nodeip = $("#nodeip").val();
        if (nodeip == "") {
            alert("请填写节点IP！");
            return false;
        }
        else {
            //ip地址
            var exp = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
            var reg = nodeip.match(exp);
            if (reg == null) {
                alert("IP地址不合法！");
                return false;
            }
        }
    }
    function save()
    {
        if ($("#taskremark").val().length < 20)
        {
            alert("备注不得少于20个字符" );
            return false;
        }
    }
    function check() {
        if ($("#taskremark").val().length < 20) {
            alert("备注不得少于20个字符");
            return false;
        }

        //TBD configrelativePath_1  configfilecontent_1 configfilename_1  同时填值 或者补填
        //TBD relativePath 需要校验文件路径
        return true;
    }

    function MySubmit() {
        if (!check()) return;
        var formData = new FormData();
        var taskDll = $('input[name="TaskDll"]').get(0).files[0];
        formData.append("TaskDll", taskDll);

        var data = {};
        var model = {};
        var config_models = [];
        //组装 model 
        model["id"] = 0;
        model["taskname"] = $("#taskname").val();
        model["categoryid"] = $("#categoryid").val();
        model["nodeid"] = $("#nodeid").val();
        //TBD 需要调整 为动态的日期
        model["taskcreatetime"] = "2019-04-19";
        model["taskupdatetime"] = "2019-05-23";
        model["tasklaststarttime"] = "2019-05-31";
        model["tasklastendtime"] = "2019-05-31";
        model["tasklasterrortime"] = "1900-01-01";
        model["taskerrorcount"] = 0;
        model["taskruncount"] = 0;
        model["taskcreateuserid"] = $("#taskcreateuserid").val();;
        model["taskstate"] = 0;
        model["taskversion"] = 1;
        model["taskpackageid"] = $("#taskpackageid").val();
        model["taskpackageversionid"] = $("#taskpackageversionid").val();
        model["taskpath"] = $("#taskpath").val();
        model["taskstartfilename"] = $("#taskstartfilename").val();
        model["taskarguments"] = $("#taskarguments").val();
        model["taskfindbatchscript"] = $("#taskfindbatchscript").val();
        model["taskuninstallbatchscript"] = $("#taskuninstallbatchscript").val();
        model["taskremark"] = $("#taskremark").val();


        //组装config_models
        var config_model1 = {};
        if ($("#configrelativePath_1").val() != "" && $("#configfilecontent_1").val() != "" && $("#configfilename_1").val() != "" ) {
            config_model1["id"] = 0;
            config_model1["taskid"] = 0;
            config_model1["relativePath"] = $("#configrelativePath_1").val();
            config_model1["filecontent"] = $("#configfilecontent_1").val();
            config_model1["filename"] = $("#configfilename_1").val();
            config_model1["lastupdatetime"] = "0001-01-01";

            config_models.push(config_model1);
        }

        data["model"] = model;
        data["config_models"] = config_models;

        formData.append("json", JSON.stringify(data));
        var url = window.location.href + "FullInfo";

        $.ajax({
            url: url,
            type: "POST",
            processData: false,
            contentType: false,
            data: formData,
            success: function (data) {
                if (data.code == 1)
                    window.location.href = window.location.href.replace("/Add", "/Index").replace("/add", "/Index");
                else
                    alert("保存失败");
            }
        });
    }


</script>
<div class="head">
    <div class="title">
        新增任务 @Html.Raw(TaskManager.Web.Models.Common.HelpHtml(""))
    </div>
</div>
<div>
    @using (Html.BeginForm("Add", "Task", FormMethod.Post, new { enctype = "multipart/form-data", @onsubmit = "return sub()" }))
    {
    <ul class="mydetail">
        <li>
            <label>任务名</label><input class="mylongtext" type="text" id="taskname" name="taskname" />
        </li>
        <li>
            <label>组别</label>
            <select name="categoryid">
                @foreach (var c in Category)
                {
                    <option value="@c.id">@c.categoryname</option>
                }
            </select>
        </li>
        <li>
            <label>创建人</label>
            <select name="taskcreateuserid">
                @foreach (var c in User)
                {
                    <option value="@c.id">@c.username</option>
                }
            </select>
        </li>
        <li>
            <label>节点</label>
            <select name="nodeid">
                @foreach (var n in Node)
                {
                    <option value="@n.id">@n.nodename</option>
                }
            </select>
        </li>
        <li>
            <label>文件名</label>
            <input class="mylongtext" type="text" id="configfilename_1" name="configfilename_1" />
        </li>
        <li>
            <label>相对路径</label>
            <input class="mylongtext" type="text" id="configrelativePath_1" name="configrelativePath_1" />
        </li>
        <li>
            <label>文件内容</label>
            <textarea id="configfilecontent_1" name="configfilecontent_1" style="height:200px"></textarea>
        </li>
        <li>
            <label>程序根目录</label><input class="mylongtext" type="text" id="taskpath" name="taskpath" />程序会部署到这个目录下
        </li>
        <li>
            <label>启动命令123</label><input class="mylongtext" type="text" id="taskstartfilename" name="taskstartfilename" />(启动tomcat 命令行脚本中的  exe名称(比如 java -jar xxx.jar 中  的java) 或者 bat脚本名,比如 start.bat run 中的 start.bat；脚本文件需要设置全路径, 如果没有设置环境变量的exe 也需要设置全路径)
        </li>
        <li>
            <label>启动命令参数</label><input class="mylongtext" type="text" id="taskarguments" name="taskarguments" />(启动服务的命令行脚本中的  参数(比如 java -jar xxx.jar 中  的-jar xxx.jar))
        </li>
        <li>
            <label>查找进程批处理脚本</label><input class="mylongtext" type="text" id="taskfindbatchscript" name="taskfindbatchscript" />(查找此任务进程id的批处理脚本，一般运行在powershell或者cmd 目前支持powershell的脚本)
        </li>
        <li>
            <label>卸载任务批处理脚本</label><input class="mylongtext" type="text" id="taskuninstallbatchscript" name="taskuninstallbatchscript" />(卸载程序包前需要执行的脚本，比如 用于 解除window服务的注册的脚本)
        </li>
        <li>
            <label>程序仓库列表</label>
            <select id="taskpackageid" name="taskpackageid" onchange="GetVersionList(this.value)">
                <option value="-1"></option>
                @foreach (var p in package)
                {
                    <option value="@p.id">@(p.packagename)</option>
                }
            </select>
        </li>
        <li>
            <label>程序仓库列表</label>
            <select id="taskpackageversionid" name="taskpackageversionid">

            </select>
        </li>
        <li>
            <label>上传文件</label><input type="file" id="TaskDll" name="TaskDll" />
        </li>
        <li>
            <label>备注</label>
            <textarea id="taskremark" name="taskremark" style="height:200px"></textarea>(不得少于20个字符)
        </li>
        <li>
            <!--            <input type="submit" class="btn1" value="提交" onclick="return save()" />-->
            <input type="button" class="btn1" value="提交" onclick="MySubmit()" />
        </li>
    </ul>
    }
</div>
