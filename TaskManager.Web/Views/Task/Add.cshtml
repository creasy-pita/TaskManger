@using TaskManager.Domain.Model;
@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<tb_category_model> Category = ViewBag.Category as List<tb_category_model>;
    List<tb_node_model> Node = ViewBag.Node as List<tb_node_model>;
    List<tb_user_model> User = ViewBag.User as List<tb_user_model>;
}
<style>
    
</style>

<script>
    function sub() {
        if ($("#nodename").val() == "") {
            alert("请填写节点名称！");
            return false;
        }
        if ($("#TaskDll").val() == "") {
            alert("请选择新版本文件！")
            return false;
        }
        var nodeip = $("#nodeip").val();
        if (nodeip == "") {
            alert("请填写节点IP！");
            return false;
        }
        else {
            //ip地址
            var exp = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
            var reg = nodeip.match(exp);
            if (reg == null) {
                alert("IP地址不合法！");
                return false;
            }
        }
    }
    function save()
    {
        if ($("#taskremark").val().length < 20)
        {
            alert("备注不得少于20个字符" );
            return false;
        }
    }
    function MySubmit() {
        var formData = new FormData();
        var taskDll = $('input[name="TaskDll"]').get(0).files[0];
        formData.append("TaskDll", taskDll);

        var data = {};
        var model = {};
        var config_models = [];
        //组装 model 
        model["id"] = 0;
        model["taskname"] = $("#taskname").val();
        model["categoryid"] = $("#categoryid").val();
        model["nodeid"] = $("#nodeid").val();
        model["taskcreatetime"] = "2019-04-19";
        model["taskupdatetime"] = "2019-05-23";
        model["tasklaststarttime"] = "2019-05-31";
        model["tasklastendtime"] = "2019-05-31";
        model["tasklasterrortime"] = "1900-01-01";
        model["taskerrorcount"] = 0;
        model["taskruncount"] = 0;
        model["taskcreateuserid"] = $("#taskcreateuserid").val();;
        model["taskstate"] = 0;
        model["taskversion"] = 1;
        model["taskappconfigjson"] = "";
        model["taskcron"] = "0/5 * * * * ?";
        model["taskmainclassnamespace"] = $("#taskmainclassnamespace").val();
        model["taskmainclassdllfilename"] = $("#taskmainclassdllfilename").val();
        model["taskremark"] = $("#taskremark").val();


        //组装config_models
        var config_model1 = {};
        config_model1["id"] = 0;
        config_model1["taskid"] = 0;
        config_model1["relativePath"] = "/a/b/c/";
        config_model1["filecontent"] = "<root>aa</root>";
        config_model1["filename"] = "appconfig.xml";
        config_model1["lastupdatetime"] = "0001-01-01";

        var config_model2 = {};
        config_model2["id"] = 0;
        config_model2["taskid"] = 0;
        config_model2["relativePath"] = "/a/b/c/";
        config_model2["filecontent"] = "{\"Logging\": {\"LogLevel\":{\"Default\":\"Warning\"}},\"AllowedHosts\": \"*\"}";
        config_model2["filename"] = "appconfig.json";
        config_model2["lastupdatetime"] = "0001-01-01";
        config_models.push(config_model1);
        config_models.push(config_model2);

        data["model"] = model;
        data["config_models"] = config_models;

        formData.append("json", JSON.stringify(data));
        var url = window.location.href + "FullInfo";

        $.ajax({
            url: url,
            type: "POST",
            processData: false,
            contentType: false,
            data: formData,
            complete: function (data) {
                alert(data);
                alert("success");
            }
        });
    }

    function MySubmit3() {
        var data = {};
        var model = {};
        var config_models = [];
        //组装 model 
        model["id"] = 0;
        model["taskname"] = $("#taskname").val();
        model["categoryid"] = $("#categoryid").val();
        model["nodeid"] = $("#nodeid").val();
        model["taskcreatetime"] = "2019-04-19";
        model["taskupdatetime"] = "2019-05-23";
        model["tasklaststarttime"] = "2019-05-31";
        model["tasklastendtime"] = "2019-05-31";
        model["tasklasterrortime"] = "1900-01-01";
        model["taskerrorcount"] = 0;
        model["taskruncount"] = 0;
        model["taskcreateuserid"] = $("#taskcreateuserid").val();;
        model["taskstate"] = 0;
        model["taskversion"] = 1;
        model["taskappconfigjson"] = "";
        model["taskcron"] = "0/5 * * * * ?";
        model["taskmainclassnamespace"] = $("#taskmainclassnamespace").val();
        model["taskmainclassdllfilename"] = $("#taskmainclassdllfilename").val();
        model["taskremark"] = $("#taskremark").val();


        //组装config_models
        var config_model1 = {};
        config_model1["id"] = 0;
        config_model1["taskid"] = 0;
        config_model1["relativePath"] = "/a/b/c/";
        config_model1["filecontent"] = "<root>aa</root>";
        config_model1["filename"] = "appconfig.xml";
        config_model1["lastupdatetime"] = "0001-01-01";

        var config_model2 = {};
        config_model2["id"] = 0;
        config_model2["taskid"] = 0;
        config_model2["relativePath"] = "/a/b/c/";
        config_model2["filecontent"] = "{\"Logging\": {\"LogLevel\":{\"Default\":\"Warning\"}},\"AllowedHosts\": \"*\"}";
        config_model2["filename"] = "appconfig.json";
        config_model2["lastupdatetime"] = "0001-01-01";
        config_models.push(config_model1);
        config_models.push(config_model2);

        data["model"] = model;
        data["config_models"] = config_models;


        var url = window.location.href + "FullInfo";
        alert(url);
        sendPostRequest(url, data);

    }


    function MySubmit1() {
        var data = {};
        //组装 model 
        data["age"] = 0;
        data["name"] = "111";
        var url = window.location.href + "FullInfo2";
        alert(url);
        sendPostRequest(url, data);
    }
    function MySubmit2() {
        var data = {};
        var model = {};
        var config_models = [];
        //组装 model 
        model["id"] = 0;
        model["taskname"] = "TasksTest";
        model["categoryid"] = 1;
        model["nodeid"] = 3;
        model["taskcreatetime"] = "2019-04-19";
        model["taskupdatetime"] = "2019-05-23";
        model["tasklaststarttime"] = "2019-05-31";
        model["tasklastendtime"] = "2019-05-31";
        model["tasklasterrortime"] = "1900-01-01";
        model["taskerrorcount"] = 0;
        model["taskruncount"] = 0;
        model["taskcreateuserid"] = 5;
        model["taskstate"] = 0;
        model["taskversion"] = 1;
        model["taskappconfigjson"] = "";
        model["taskcron"] = "0/5 * * * * ?";
        model["taskmainclassnamespace"] = "BackgroundTasksSample";
        model["taskmainclassdllfilename"] = "BackgroundTasksSample.dll aaa";
        model["taskremark"] = "BackgroundTasksSampleWindowsVersion";


        //组装config_models
        var config_model1 = {};
        config_model1["id"] = 0;
        config_model1["taskid"] = 0;
        config_model1["relativePath"] = "/a/b/c/";
        config_model1["filecontent"] = "<root>aa</root>";
        config_model1["filename"] = "appconfig.xml";
        config_model1["lastupdatetime"] = "0001-01-01";

        var config_model2 = {};
        config_model2["id"] = 0;
        config_model2["taskid"] = 0;
        config_model2["relativePath"] = "/a/b/c/";
        config_model2["filecontent"] = "{\"Logging\": {\"LogLevel\":{\"Default\":\"Warning\"}},\"AllowedHosts\": \"*\"}";
        config_model2["filename"] = "appconfig.json";
        config_model2["lastupdatetime"] = "0001-01-01";
        config_models.push(config_model1);
        config_models.push(config_model2);

        data["model"] = model;
        data["config_models"] = config_models;
        

        var url = window.location.href+"FullInfo";
        alert(url);
        sendPostRequest(url, data);

    }
//**
// * 发送post请求
 //*  {Object} url
 //* {Object} obj 
 //*/
function sendPostRequest(url, obj) {
	var xmlhttp;
	if (window.XMLHttpRequest) {
		xmlhttp = new XMLHttpRequest();
	} else {
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}
	xmlhttp.onreadystatechange = function() {
		if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
			alert(xmlhttp.responseText);
		} else if (xmlhttp.readyState == 4 && xmlhttp.status == 0) {
			alert("服务器未响应");
		}
	}
	xmlhttp.open("POST", url, true);
	xmlhttp.setRequestHeader('Content-Type', 'application/json');
    //xmlhttp.send(obj);
    xmlhttp.send(JSON.stringify(obj));
}

</script>
<div class="head">
    <div class="title">
        新增任务 @Html.Raw(TaskManager.Web.Models.Common.HelpHtml(""))
    </div>
</div>
<div>
    @using (Html.BeginForm("Add", "Task", FormMethod.Post, new { enctype = "multipart/form-data", @onsubmit = "return sub()" }))
    {
    <ul class="mydetail">
        <li>
            <label>任务名</label><input class="mylongtext" type="text" id="taskname" name="taskname" />
        </li>
        <li>
            <label>组别</label>
            <select name="categoryid">
                @foreach (var c in Category)
                { 
                    <option value="@c.id">@c.categoryname</option>
                }
            </select>
        </li> 
        <li>
            <label>创建人</label>
            <select name="taskcreateuserid">
                @foreach (var c in User)
                { 
                    <option value="@c.id">@c.username</option>
                }
            </select>
        </li>
        <li>
            <label>节点</label>
            <select name="nodeid">
                @foreach (var n in Node)
                { 
                    <option value="@n.id">@n.nodename</option>
                }
            </select>
        </li>
        <li>
            <label>文件名</label>
            <input class="mylongtext" type="text" id="configfilename_1" name="configfilename_1" />
            <label>相对路径</label>
            <input class="mylongtext" type="text" id="configfilepath_1" name="configfilepath_1" />
            <label>文件内容</label>
            <textarea id="configfilecontent_1" name="configfilecontent_1" style="height:200px"></textarea>
        </li>
        <li>
            <label>任务配置json</label>
            <textarea id="taskappconfigjson" name="taskappconfigjson" style="height:200px"></textarea>示范:{"key1":"value1","key2":"value2"}
        </li>
        <li>
            <label>数据库临时数据json</label>
            <textarea id="tempdatajson" name="tempdatajson" style="height:200px"></textarea>示范:{"key1":"value1","key2":"value2"}
        </li>
        <li>
            <label>任务入口类的命名空间</label><input class="mylongtext" type="text" id="taskmainclassnamespace" name="taskmainclassnamespace" />示范：TaskManager.Demo.DemoTask
        </li>
        <li>
            <label>任务入口dll文件名</label><input class="mylongtext" type="text" id="taskmainclassdllfilename" name="taskmainclassdllfilename" />示范: TaskManager.Demo.exe
        </li>
        <li>
            <label>上传文件</label><input type="file" id="TaskDll" name="TaskDll" />
        </li>
        <li>
            <label>备注</label>
            <textarea id="taskremark" name="taskremark" style="height:200px"></textarea>(不得少于20个字符)
        </li>
        <li>
            <!--            <input type="submit" class="btn1" value="提交" onclick="return save()" />-->
            <input type="button" class="btn1" value="提交" onclick="MySubmit()" />
        </li>
    </ul>
    }
</div>
